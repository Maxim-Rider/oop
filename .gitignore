#Наследование
class Table:
    def __init__(self, l, w, h):
        self.lenght = l
        self.width = w
        self.height = h
 
class KitchenTable(Table):
    def setPlaces(self, p):
        self.places = p
 
class DeskTable(Table):
    def square(self):
        return self.width * self.length

#Полиморфизм
class T1:
     n=10
     def total(self, N):
          self.total = int(self.n) + int(N)
 
class T2:
     def total(self,s):
          self.total = len(str(s))
 
t1 = T1()
t2 = T2()
t1.total(45)
t2.total(45)
print(t1.total) # Вывод: 55
print(t2.total) # Вывод: 2

#Инкапсуляция
class Phone:
    number = "111-11-11"
    def print_number(self):
        print( "Phone number is: ", self.number )

my_phone = Phone()
my_phone.print_number()

input( "Press Enter to exit" )

#Композиция
class Room:
    def __init__(self, x, y, z):
        self.square = 2 * z * (x + y)
        self.wd = []
    def addWD(self, w, h):
        self.wd.append(WinDoor(w, h))
    def workSurface(self):
        new_square = self.square
        for i in self.wd:
            new_square -= i.square
        return new_square
 
r1 = Room(6, 3, 2.7) 
print(r1.square) # выведет 48.6
r1.addWD(1, 1) 
r1.addWD(1, 1)
r1.addWD(1, 2)
print(r1.workSurface()) # выведет 44.6

#Перегрузка операторов
class A:
     def __init__(self, name):
         self.name = name
    
a = A('Vasya')
print(a.name)

#Конструктор
class Rectangle:
    def __init__(self, w = 0.5, h = 1):
        self.width = w
        self.height = h
    def square(self):
        return self.width * self.height
 
rec1 = Rectangle(5, 2)
rec2 = Rectangle()
rec3 = Rectangle(3)
rec4 = Rectangle(h = 4)
print(rec1.square())
print(rec2.square())
print(rec3.square())
print(rec4.square())

#Деструктор
class Class1:
    def __init__(self): # Конструктор класса
        print("Вызван метод __init__()")
    def __del__(self):  # Деструктор класса
        print("Вызван метод __del__()")
c1 = Class1()          # Выведет: Вызван метод __init__()
del c1                 # Выведет: Вызван метод __del__()
c2 = Class1()          # Выведет: Вызван метод __init__()
c3 = c2                # Создаем ссылку на экземпляр класса
del c2                 # Ничего не выведет, т.к. существует ссылка
del c3                 # Выведет: Вызван метод __del__()4

#set
thisset = {"apple", "banana", "cherry"}
print(thisset)

#get
car = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}

x = car.get("model")

print(x)

#Абстракция
class Queen(ChessPiece):
    def move(self):
        print("Moved Queen to e2e4")
 
# Мы можем создать экземпляр класса
q = Queen()
# И нам доступны все методы класса
q.draw()
q.move()
